题目描述
Given a binary tree, find its minimum depth.The minimum depth is the number of nodes 
along the shortest path from the root node down to the nearest leaf node.


    /**
     * 思路1：
     * 深度优先遍历（DFS）
     * 如果当前节点是空，则最小深度为 0，返回
     * 效率低
     */
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
    public int run(TreeNode root) {
        if (root == null) {
            return 0;
        }
        int l = run(root.left);
        int r = run(root.right);
        if (l == 0 || r == 0) {
            return l + r + 1;
        }
        return Math.min(l, r) + 1;
    }
     
    /**
     * 思路2：
     * 广度优先遍历（BFS）
     * 找到第一个叶子结点就可以停止遍历
     * 效率高
     */

import java.util.LinkedList;
public class Solution {
    public int run(TreeNode root) {
        if(root==null) return 0;
        LinkedList<TreeNode> list = new LinkedList<TreeNode>();
        int start = 0, end = 1, k = 1;
        list.add(root);
        while(!list.isEmpty()){
            TreeNode node = list.removeFirst();
            start++;
            if(node.left==null&&node.right==null){
                return k;
            } 
            if(node.left!=null) {
                list.add(node.left);
            }
            if(node.right!=null){
                list.add(node.right);
            }
            if(start==end){
                k++;
                start = 0;
                end = list.size();
            }
        }
        return k;
    }
}