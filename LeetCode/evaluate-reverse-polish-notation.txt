ÌâÄ¿ÃèÊö

Evaluate the value of an arithmetic expression in Reverse Polish Notation.

Valid operators are+,-,*,/. Each operand may be an integer or another expression.

Some examples:

  ["2", "1", "+", "3", "*"] -> ((2 + 1) * 3) -> 9
  ["4", "13", "5", "/", "+"] -> (4 + (13 / 5)) -> 6



import java.util.Stack;
public class Solution {
    public int evalRPN(String[] tokens) {
        Stack<Integer> intStack = new Stack<Integer>();
        for(int i = 0; i < tokens.length; i++){
            if(tokens[i].equals("+") || tokens[i].equals("-") ||
               tokens[i].equals("*") || tokens[i].equals("/")){
                int num1 = intStack.pop();
                int num2 = intStack.pop();
                intStack.push(Cal(tokens[i], num1, num2));
            }
            else{
                intStack.push(Integer.parseInt(tokens[i]));
            }
        }
        return intStack.pop();
    }
    
    public int Cal(String operator, int num1, int num2){
        if(operator.equals("+")){
            return num2 + num1;
        }
        else if(operator.equals("-")){
            return num2 - num1;
        }
        else if(operator.equals("*")){
            return num2 * num1;
        }
        else
            return num2 / num1;
    }
}