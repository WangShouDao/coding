Ã‚ƒø√Ë ˆ

Sort a linked list in O(n log n) time using constant space complexity.


/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode sortList(ListNode head) {
        if(head==null||head.next==null)
            return head;
        ListNode mid = getMid(head);
        ListNode midNext = mid.next;
        mid.next = null;
        return mergeSort(sortList(head), sortList(midNext));
    }
    
    public ListNode getMid(ListNode head){
        if(head==null||head.next==null)
            return head;
        ListNode fast = head;
        ListNode slow = head;
        while(fast.next!=null&&fast.next.next!=null){
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
    
    public ListNode mergeSort(ListNode node1, ListNode node2){
        ListNode preHead = new ListNode(0);
        ListNode cur1 = node1, cur2 = node2, cur = preHead;
        while(cur1!=null&&cur2!=null){
            if(cur1.val<cur2.val){
                cur.next = cur1;
                cur1 = cur1.next;
            } else {
                cur.next = cur2;
                cur2 = cur2.next;
            }
            cur = cur.next;
        }
        if(cur1==null)
            cur.next = cur2;
        else
            cur.next = cur1;
        return preHead.next;
    }
}