Ã‚ƒø√Ë ˆ

A linked list is given such that each node contains an additional random pointer 
which could point to any node in the list or null.

Return a deep copy of the list.


/**
 * Definition for singly-linked list with a random pointer.
 * class RandomListNode {
 *     int label;
 *     RandomListNode next, random;
 *     RandomListNode(int x) { this.label = x; }
 * };
 */
import java.util.*;
public class Solution {
    public RandomListNode copyRandomList(RandomListNode head) {
        if(head==null)
            return null;
        HashMap<RandomListNode,RandomListNode> map=new HashMap<RandomListNode,RandomListNode>();
        RandomListNode next=head;
        RandomListNode newHead=null;
        RandomListNode newNext=null;
        while(next!=null){
            RandomListNode temp=next.next;
            RandomListNode copy=new RandomListNode(next.label);
            copy.random=next.random;
            map.put(next,copy);
            if(newHead==null){
                newHead=copy;
                newNext=copy;
            }
            else{
                newNext.next=copy;
                newNext=copy;
            }
            next=temp;
        }
        newNext=newHead;
        while(newNext!=null){
            if(newNext.random!=null){
                newNext.random=map.get(newNext.random);
            }
            newNext=newNext.next;
        }
        return newHead;
    }
}

