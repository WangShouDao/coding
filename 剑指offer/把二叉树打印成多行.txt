题目描述
从上到下按层打印二叉树，同一层结点从左至右输出。每一层输出一行。


import java.util.ArrayList;
import java.util.Queue;
import java.util.LinkedList;
/*
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }

}
*/
public class Solution {
    ArrayList<ArrayList<Integer> > Print(TreeNode pRoot) {
        ArrayList<ArrayList<Integer> > list = new ArrayList<ArrayList<Integer> >();
        if(pRoot == null) return list;
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        ArrayList<Integer> temp = new ArrayList<Integer>();
        queue.add(pRoot);
        int start=0, end=1;
        while(!queue.isEmpty()){
            TreeNode node = queue.poll();
            temp.add(node.val);
            start++;
            if(node.left!=null){
                queue.add(node.left);
            }
            if(node.right!=null){
                queue.add(node.right);
            }
            if(start==end){
                list.add(temp);
                start = 0;
                end = queue.size();
                temp = new ArrayList<Integer>();
            }
        }
        return list;
    }
}


//用递归做的
public class Solution {
    ArrayList<ArrayList<Integer> > Print(TreeNode pRoot) {
        ArrayList<ArrayList<Integer>> list = new ArrayList<>();
        depth(pRoot, 1, list);
        return list;
    }
     
    private void depth(TreeNode root, int depth, ArrayList<ArrayList<Integer>> list) {
        if(root == null) return;
        if(depth > list.size())
            list.add(new ArrayList<Integer>());
        list.get(depth -1).add(root.val);
         
        depth(root.left, depth + 1, list);
        depth(root.right, depth + 1, list);
    }
}