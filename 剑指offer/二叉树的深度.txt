题目描述
输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成
树的一条路径，最长路径的长度为树的深度。


/**
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }

}
*/
public class Solution {
    public int TreeDepth(TreeNode root) {
        if(root==null) return 0;
        int nLeft = TreeDepth(root.left);
        int nRight = TreeDepth(root.right);
        return nLeft>nRight?(nLeft+1):(nRight+1);
    }
}



//depth：当前节点所在的层数，count已经遍历了的节点数，nextCount下层的节点总数；
//当count==nextCount的时候，代表本层的节点已经遍历完毕。
import java.util.*;
public class Solution {
    public int TreeDepth(TreeNode root) {
        if(root==null) return 0;
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        queue.add(root);
        int depth = 0, count = 0, nextCount = 1;
        while(!queue.isEmpty()){
            TreeNode pNode = queue.poll();
            count++;
            if(pNode.left!=null){
                queue.add(pNode.left);
            }
            if(pNode.right!=null){
                queue.add(pNode.right);
            }
            if(count==nextCount){
                nextCount = queue.size();
                count = 0;
                depth++;
            }
        }
        return depth;
    }
}