题目描述
HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。
今天测试组开完会后,他又发话了:在古老的一维模式
识别中,常常需要计算连续子向量的最大和,当向量全为
正数的时候,问题很好解决。但是,如果向量中包含负数,
是否应该包含某个负数,并期望旁边的正数会弥补它呢？
例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8
(从第0个开始,到第3个为止)。你会不会被他忽悠住？
(子向量的长度至少是1)


public class Solution {
    public int FindGreatestSumOfSubArray(int[] array) {
        if(array.length==0)
            return 0;
        int sum = array[0];
        int tmp = array[0];
        for(int i=1;i<array.length;i++){
            sum+=array[i];
            if(sum>tmp)
                tmp=sum;
            if(sum<0)
                sum=0;
        }
        return tmp;
    }
} 


public class Solution {
    public int FindGreatestSumOfSubArray(int[] array) {
        if(array.length==0)
            return 0;
        int sum = array[0];
        int tmp = array[0];
        for(int i=1;i<array.length;i++){
            tmp = (tmp < 0) ? array[i] : tmp + array[i];
            sum = (tmp > sum) ? tmp : sum;
        }
        return sum;
    }
}

ublic  int FindGreatestSumOfSubArray(int[] array) {
        int res = array[0]; //记录当前所有子数组的和的最大值
        int max=array[0];   //包含array[i]的连续数组最大值
        for (int i = 1; i < array.length; i++) {
            max=Math.max(max+array[i], array[i]);
            res=Math.max(max, res);
        }
        return res;
}