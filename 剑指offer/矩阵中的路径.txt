题目描述
请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径
可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右，向上，向下移动一个
格子。如果一条路径经过了矩阵中的某一个格子，则之后不能再次进入这个格子。 例如 
a b c e s f c s a d e e 这样的3 X 4 矩阵中包含一条字符串"bcced"的路径，但是矩阵中
不包含"abcb"路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径
不能再次进入该格子。



public class Solution {
    public boolean hasPath(char[] matrix, int rows, int cols, char[] str)
    {
        if(matrix==null||matrix.length==0||str==null||str.length>rows*cols)
            return false;
        boolean[] visited = new boolean[rows*cols];
        int k = 0;
        for(int i=0;i<rows;i++){
            for(int j=0;j<cols;j++){
                if(hasPathHelper(matrix, rows, cols, str, i, j, visited, k))
                    return true;
            }
        }
        return false;
    }

    public boolean hasPathHelper(char[] matrix, int rows, int cols, char[] str, 
                                int i, int j, boolean[] visited, int k){
        boolean flag = false;
        if(i>=0&&i<rows&&j>=0&&j<cols&&!visited[i*cols+j]&&matrix[i*cols+j]==str[k]){
            k++;
            visited[i*cols+j] = true;
            if(k==str.length) return true;
            flag = hasPathHelper(matrix, rows, cols, str, i, j+1, visited, k)||
                    hasPathHelper(matrix, rows, cols, str, i-1, j, visited, k)||
                    hasPathHelper(matrix, rows, cols, str, i+1, j, visited, k)||
                    hasPathHelper(matrix, rows, cols, str, i, j-1, visited, k);
            if(!flag) {
                k-- ;
                visited[i*cols+j] = false ;
            }
        }
        return flag;
    }
}